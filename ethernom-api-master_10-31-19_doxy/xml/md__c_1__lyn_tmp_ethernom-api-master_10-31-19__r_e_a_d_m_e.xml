<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="md__c_1__lyn_tmp_ethernom-api-master_10-31-19__r_e_a_d_m_e" kind="page">
    <compoundname>md_C:_Lyn_tmp_ethernom-api-master_10-31-19_README</compoundname>
    <title>Installation:</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>From your command line: <programlisting filename=".bash"><codeline><highlight class="normal">cd<sp/>-&gt;<sp/>directory</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Clone<sp/>the<sp/>ethernom-api<sp/>repository<sp/>to<sp/>the<sp/>root<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Open<sp/>package.json</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Add<sp/>back:<sp/>&quot;ethernom-api&quot;:&quot;1.0.0&quot;</highlight></codeline>
</programlisting></para><para><heading level="3">API CALLS:</heading>
</para><para><heading level="3">How-To: Initialize EthernomAPI:</heading>
</para><para>Parameter: {<linebreak/>
 transportType = &quot;USB&quot;, &quot;BLE&quot; &amp; &quot;NFC&quot;,<linebreak/>
 API_ID = 0x00 ~ 0xFF,<linebreak/>
 secsTimeout = -1 (Doesn&apos;t timeout) or possitive integer,<linebreak/>
 allowDuplicates = true or false,<linebreak/>
 stopScanOnWrite = true or false,<linebreak/>
 Callback function<linebreak/>
 }<linebreak/>
 Callback: resultCode <programlisting filename=".bash"><codeline><highlight class="normal">import<sp/>{EthernomAPI}<sp/>from<sp/>&quot;ethernom-api&quot;;</highlight></codeline>
<codeline><highlight class="normal">var<sp/>MAIN_E_API<sp/>=<sp/>new<sp/>EthernomAPI(transportType,<sp/>API_ID,<sp/>secsTimeout,<sp/>allowDuplicates,<sp/>stopScanOnWrite,<sp/>(resultCode)<sp/>=&gt;{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Initialize<sp/>success</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAIN_E_API.DiscoverDevices(this._device_discovery);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Can<sp/>start<sp/>using<sp/>other<sp/>EthernomAPI<sp/>calls</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Initialize<sp/>fail</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> <linebreak/>
</para><para><heading level="3">How-To: Discovery devices:</heading>
</para><para>Parameter: Callback function<linebreak/>
 Callback: resultCode, deviceID and deviceName <programlisting filename=".bash"><codeline><highlight class="normal">MAIN_E_API.DiscoverDevices(this._device_discovery);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_device_discovery<sp/>=<sp/>(resultCode,<sp/>deviceID,<sp/>deviceName)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceName):</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <linebreak/>
</para><para>### How-To: Stop discovery devices: <programlisting filename=".bash"><codeline><highlight class="normal">MAIN_E_API.StopDiscovery();</highlight></codeline>
</programlisting> <linebreak/>
</para><para><heading level="3">How-To: Select/Connect devices:</heading>
</para><para>When want to select/connect to a devices, create a new EthernomAPI instaces to handle the connection.<linebreak/>
 Parameter: deviceID, deviceName &amp; Callback function<linebreak/>
 Callback: resultCode <programlisting filename=".bash"><codeline><highlight class="normal">var<sp/>E_API<sp/>=<sp/>new<sp/>EthernomAPI(transportType,<sp/>API_ID,<sp/>0,<sp/>false,<sp/>true,<sp/>(resultCode)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this._device_select(resultCode,<sp/>deviceID,<sp/>deviceName,<sp/>E_API);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>initialize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_device_select<sp/>=<sp/>(resultCode,<sp/>deviceID,<sp/>deviceName,<sp/>E_API)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>E_API.Select(deviceID,<sp/>deviceName,<sp/>(resultCode)<sp/>=&gt;{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Can<sp/>start<sp/>write/read<sp/>card</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>select</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <linebreak/>
</para><para><heading level="3">How-To: Write to devices:</heading>
</para><para>Parameter: Inbound Message Struct, Outbound Message Struct &amp; Callback function<linebreak/>
 Callback: resultCode and Inbound Message <programlisting filename=".bash"><codeline><highlight class="normal">//Options<sp/>for<sp/>Outbound<sp/>message<sp/>variable<sp/>types<sp/>are:<sp/>ETH_STRING_AS_UNICODE,<sp/>ETH_STRING_AS_ASUTF8,<sp/>ETH_INT_AS_BYTE<sp/>&amp;<sp/>ETH_INT_AS_2BYTE</highlight></codeline>
<codeline><highlight class="normal">//Outbound<sp/>message<sp/>is<sp/>what<sp/>will<sp/>be<sp/>send<sp/>to<sp/>the<sp/>car</highlight></codeline>
<codeline><highlight class="normal">//Each<sp/>parameter<sp/>must<sp/>contains<sp/>the<sp/>value</highlight></codeline>
<codeline><highlight class="normal">var<sp/>out_msg<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>TRK_H2C_INIT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_STRING_AS_ASTUF8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;STRING_VALUE&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_STRING_AS_UNICODE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;汉字&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_2BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>integer<sp/>(0<sp/>~<sp/>65535);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>integer<sp/>(0<sp/>~<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Options<sp/>for<sp/>Inbound<sp/>message<sp/>variable<sp/>types<sp/>are:<sp/>ETH_UNICODESTRING,<sp/>ETH_UTF8STRING,<sp/>ETH_BYTE,<sp/>ETH_2BYTE,<sp/>ETH_PAYLOAD</highlight></codeline>
<codeline><highlight class="normal">//Inbound<sp/>message<sp/>is<sp/>to<sp/>define<sp/>to<sp/>what&apos;s<sp/>the<sp/>expected<sp/>value<sp/>back<sp/>from<sp/>the<sp/>card,<sp/>when<sp/>the<sp/>EthernomAPI<sp/>receives<sp/>the<sp/>message<sp/>from<sp/>card.<sp/></highlight></codeline>
<codeline><highlight class="normal">//The<sp/>EthernomAPI<sp/>will<sp/>know<sp/>which<sp/>value<sp/>belongs<sp/>to<sp/>which<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal">var<sp/>in_msg<sp/><sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command<sp/>:<sp/>ETH_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER1:<sp/>ETH_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER2:<sp/>ETH_2BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER3:<sp/>ETH_UTF8STRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER4:<sp/>ETH_UNICODESTRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PAYLOAD:<sp/>ETH_PAYLOAD<sp/>(Optional)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">E_API.WriteJSON(out_msg,<sp/>in_msg,<sp/>(resultCode,<sp/>msg)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.command):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER1):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER2):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER3):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PAYLOAD):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>write</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <linebreak/>
</para><para><heading level="3">How-To: Subscribe to unsolicted events:</heading>
</para><para>Parameter: deviceID, deviceName, Inbound Message Struct, Callback function<linebreak/>
 Callback: resultCode and Inbound Message <programlisting filename=".bash"><codeline><highlight class="normal">E_API.SubscribeToUnsolictedEvents(deviceID,<sp/>deviceName,<sp/>in_msg,<sp/>this._on_listener);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_on_listener<sp/>=<sp/>(deviceID,<sp/>deviceName,<sp/>resultCode,<sp/>msg)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>### How-To: Unsubscribe to unsolicted events: <programlisting filename=".bash"><codeline><highlight class="normal">E_API.UnSubscribeToUnsolictedEvents();</highlight></codeline>
</programlisting> <linebreak/>
</para><para><heading level="3">How-To: Card close:</heading>
</para><para>Parameter: Callback function<linebreak/>
 Callback: resultCode <programlisting filename=".bash"><codeline><highlight class="normal">E_API.CardClose(this._callback_disconnect);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_callback_disconnect<sp/>=<sp/>(resultCode)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Disconnect<sp/>successfully&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Fails&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
