<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">###<sp/>Installation:</highlight></codeline>
<codeline><highlight class="normal">From<sp/>your<sp/>command<sp/>line:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>-&gt;<sp/>directory</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Clone<sp/>the<sp/>ethernom-api<sp/>repository<sp/>to<sp/>the<sp/>root<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Open<sp/>package.json</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Add<sp/>back:<sp/>&quot;ethernom-api&quot;:&quot;1.0.0&quot;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>API<sp/>CALLS:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Initialize<sp/>EthernomAPI:</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>{&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>transportType<sp/><sp/><sp/>=<sp/>&quot;USB&quot;,<sp/>&quot;BLE&quot;<sp/>&amp;<sp/>&quot;NFC&quot;,&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>API_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00<sp/>~<sp/>0xFF,&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>secsTimeout<sp/><sp/><sp/><sp/><sp/>=<sp/>-1<sp/>(Doesn&apos;t<sp/>timeout)<sp/>or<sp/>possitive<sp/>integer,&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>allowDuplicates<sp/>=<sp/>true<sp/>or<sp/>false,&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stopScanOnWrite<sp/>=<sp/>true<sp/>or<sp/>false,&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">}&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">import<sp/>{EthernomAPI}<sp/>from<sp/>&quot;ethernom-api&quot;;</highlight></codeline>
<codeline><highlight class="normal">var<sp/>MAIN_E_API<sp/>=<sp/>new<sp/>EthernomAPI(transportType,<sp/>API_ID,<sp/>secsTimeout,<sp/>allowDuplicates,<sp/>stopScanOnWrite,<sp/>(resultCode)<sp/>=&gt;{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Initialize<sp/>success</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAIN_E_API.DiscoverDevices(this._device_discovery);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Can<sp/>start<sp/>using<sp/>other<sp/>EthernomAPI<sp/>calls</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Initialize<sp/>fail</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Discovery<sp/>devices:</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode,<sp/>deviceID<sp/>and<sp/>deviceName</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">MAIN_E_API.DiscoverDevices(this._device_discovery);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">_device_discovery<sp/>=<sp/>(resultCode,<sp/>deviceID,<sp/>deviceName)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceName):</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Stop<sp/>discovery<sp/>devices:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">MAIN_E_API.StopDiscovery();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Select/Connect<sp/>devices:</highlight></codeline>
<codeline><highlight class="normal">When<sp/>want<sp/>to<sp/>select/connect<sp/>to<sp/>a<sp/>devices,<sp/>create<sp/>a<sp/>new<sp/>EthernomAPI<sp/>instaces<sp/>to<sp/>handle<sp/>the<sp/>connection.&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>deviceID,<sp/>deviceName<sp/>&amp;<sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">var<sp/>E_API<sp/>=<sp/>new<sp/>EthernomAPI(transportType,<sp/>API_ID,<sp/>0,<sp/>false,<sp/>true,<sp/>(resultCode)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this._device_select(resultCode,<sp/>deviceID,<sp/>deviceName,<sp/>E_API);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>initialize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_device_select<sp/>=<sp/>(resultCode,<sp/>deviceID,<sp/>deviceName,<sp/>E_API)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>E_API.Select(deviceID,<sp/>deviceName,<sp/>(resultCode)<sp/>=&gt;{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Can<sp/>start<sp/>write/read<sp/>card</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>select</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Write<sp/>to<sp/>devices:</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>Inbound<sp/>Message<sp/>Struct,<sp/>Outbound<sp/>Message<sp/>Struct<sp/>&amp;<sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode<sp/>and<sp/>Inbound<sp/>Message</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">//Options<sp/>for<sp/>Outbound<sp/>message<sp/>variable<sp/>types<sp/>are:<sp/>ETH_STRING_AS_UNICODE,<sp/>ETH_STRING_AS_ASUTF8,<sp/>ETH_INT_AS_BYTE<sp/>&amp;<sp/>ETH_INT_AS_2BYTE</highlight></codeline>
<codeline><highlight class="normal">//Outbound<sp/>message<sp/>is<sp/>what<sp/>will<sp/>be<sp/>send<sp/>to<sp/>the<sp/>car</highlight></codeline>
<codeline><highlight class="normal">//Each<sp/>parameter<sp/>must<sp/>contains<sp/>the<sp/>value</highlight></codeline>
<codeline><highlight class="normal">var<sp/>out_msg<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>TRK_H2C_INIT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_STRING_AS_ASTUF8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;STRING_VALUE&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_STRING_AS_UNICODE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;汉字&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_2BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>integer<sp/>(0<sp/>~<sp/>65535);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding:<sp/>ETH_INT_AS_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>integer<sp/>(0<sp/>~<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Options<sp/>for<sp/>Inbound<sp/>message<sp/>variable<sp/>types<sp/>are:<sp/>ETH_UNICODESTRING,<sp/>ETH_UTF8STRING,<sp/>ETH_BYTE,<sp/>ETH_2BYTE,<sp/>ETH_PAYLOAD</highlight></codeline>
<codeline><highlight class="normal">//Inbound<sp/>message<sp/>is<sp/>to<sp/>define<sp/>to<sp/>what&apos;s<sp/>the<sp/>expected<sp/>value<sp/>back<sp/>from<sp/>the<sp/>card,<sp/>when<sp/>the<sp/>EthernomAPI<sp/>receives<sp/>the<sp/>message<sp/>from<sp/>card.<sp/></highlight></codeline>
<codeline><highlight class="normal">//The<sp/>EthernomAPI<sp/>will<sp/>know<sp/>which<sp/>value<sp/>belongs<sp/>to<sp/>which<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal">var<sp/>in_msg<sp/><sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command<sp/>:<sp/>ETH_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER1:<sp/>ETH_BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER2:<sp/>ETH_2BYTE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER3:<sp/>ETH_UTF8STRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER4:<sp/>ETH_UNICODESTRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PAYLOAD:<sp/>ETH_PAYLOAD<sp/>(Optional)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">E_API.WriteJSON(out_msg,<sp/>in_msg,<sp/>(resultCode,<sp/>msg)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.command):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER1):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER2):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER3):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PARAMETER4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(msg.PAYLOAD):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Fails<sp/>write</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Subscribe<sp/>to<sp/>unsolicted<sp/>events:</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>deviceID,<sp/>deviceName,<sp/>Inbound<sp/>Message<sp/>Struct,<sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode<sp/>and<sp/>Inbound<sp/>Message</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">E_API.SubscribeToUnsolictedEvents(deviceID,<sp/>deviceName,<sp/>in_msg,<sp/>this._on_listener);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_on_listener<sp/>=<sp/>(deviceID,<sp/>deviceName,<sp/>resultCode,<sp/>msg)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(deviceName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Unsubscribe<sp/>to<sp/>unsolicted<sp/>events:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">E_API.UnSubscribeToUnsolictedEvents();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;br<sp/>/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How-To:<sp/>Card<sp/>close:</highlight></codeline>
<codeline><highlight class="normal">Parameter:<sp/>Callback<sp/>function&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">Callback:<sp/>resultCode</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">E_API.CardClose(this._callback_disconnect);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_callback_disconnect<sp/>=<sp/>(resultCode)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(resultCode<sp/>==<sp/>ETH_SUCCESS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Disconnect<sp/>successfully&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Fails&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="C:/Lyn/tmp/ethernom-api-master_10-31-19/README.md"/>
  </compounddef>
</doxygen>
